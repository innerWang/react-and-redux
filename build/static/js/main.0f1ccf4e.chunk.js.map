{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","id","this","props","n","onClick","add1","add2","add3","add4","Component","connect","state","dispatch","type","payload","Boolean","window","location","hostname","match","store","createStore","action","undefined","Object","objectSpread","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAwCMA,mLAGF,OAAQC,EAAAC,EAAAC,cAAA,sCACFF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,SAASC,KAAKC,MAAMC,GAD3B,SAEJN,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UAAQC,GAAG,OAAOI,QAAWH,KAAKC,MAAMG,MAAxC,MACAR,EAAAC,EAAAC,cAAA,UAAQC,GAAG,OAAOI,QAAWH,KAAKC,MAAMI,MAAxC,MACAT,EAAAC,EAAAC,cAAA,UAAQC,GAAG,WAAWI,QAAWH,KAAKC,MAAMK,MAA5C,0CACAV,EAAAC,EAAAC,cAAA,UAAQC,GAAG,iBAAiBI,QAAWH,KAAKC,MAAMM,MAAlD,uCATOC,aA6DHC,kBA7Cf,SAAWC,GACT,MAAO,CACLR,EAAEQ,EAAMR,IAuBZ,SAAWS,GACT,MAAO,CACLP,KAAM,WACJO,EAAS,CAACC,KAAK,MAAMC,QAAQ,KAE/BR,KAAM,WACJM,EAAS,CAACC,KAAK,MAAMC,QAAQ,KAE/BP,KAAM,aAGNC,KAAM,eASKE,CAAad,GCzFRmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECGAC,EAAQC,YAbO,SAACV,EAAMW,GAC1B,YAAaC,IAAVZ,EACM,CAACR,EAAE,GAEQ,QAAfmB,EAAOT,KACIW,OAAAC,EAAA,EAAAD,CAAA,GAAOb,EAAP,CAAaR,EAAGQ,EAAMR,EAAEmB,EAAOR,UAGpCH,IAgCXe,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAUR,MAAOA,GAC/BvB,EAAAC,EAAAC,cAAC8B,EAAD,OACWC,SAASC,eAAe,SD+EjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f1ccf4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\n\n// class App extends Component {\n\n//   add1 = ()=>{\n//     this.props.onAdd1()\n//   }\n\n//   add2 = ()=>{\n//     this.props.onAdd2()\n//   }\n\n//   add3 = ()=>{\n//     this.props.onAdd3()\n//   }\n\n//   add4(){\n//     this.props.onAdd4()\n//   }\n\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         你点击了<span id=\"value\">{this.props.value}</span>次\n//         <div>\n//           <button id=\"add1\" onClick = {this.add1}>+1</button>\n//           <button id=\"add2\" onClick = {this.add2}>+2</button>\n//           <button id=\"addIfOdd\" onClick = {this.add3}>如果是单数就+1</button>\n//           <button id=\"addAfterTwoSec\" onClick = {()=>this.add4()}>两秒钟后+1</button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n//export default App;\n\nclass App extends Component {\n\n  render(){\n    return (<div>\n      你点击了<span id=\"value\">{this.props.n}</span>次\n        <div>\n           <button id=\"add1\" onClick = {this.props.add1}>+1</button>\n           <button id=\"add2\" onClick = {this.props.add2}>+2</button>\n           <button id=\"addIfOdd\" onClick = {this.props.add3}>如果是单数就+1</button>\n           <button id=\"addAfterTwoSec\" onClick = {this.props.add4}>两秒钟后+1</button>\n         </div>\n    </div>)\n  }\n}\n\n//map state to props ,用于获取部分store,即将state里面的内容传给组件的props\nfunction x(state){\n  return {\n    n:state.n\n  }\n}\n\n// map Dispatch To Props,用于生成action,是一个对象\n// const y= {\n//     add1: ()=>{\n//       return {type:'add',payload:1}\n//     },\n//     add2: ()=>{\n//       return {type:'add',payload:2}\n//     },\n//     add3: (content)=>{\n//       if(content % 2 === 1){\n//         return {type:'add',payload:1}\n//       }\n//     },\n//     add4: ()=>{\n//       //setTimeout(()=>{return {type:'add',payload:1}},2000)\n//     }\n// }\n\n//将mapDispatch写成函数\nfunction y(dispatch){\n  return {\n    add1: ()=>{\n      dispatch({type:'add',payload:1}) \n    },\n    add2: ()=>{\n      dispatch({type:'add',payload:2}) \n    },\n    add3: ()=>{\n      \n    },\n    add4: ()=>{\n      \n    }\n  }\n}\n\n\n\n\nexport default connect(x,y)(App)\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux'\n\nconst stateChanger = (state,action)=>{\n  if(state === undefined){\n    return {n:0}\n  }else{\n    if(action.type ==='add'){\n      let newstate = {...state,n:(state.n+action.payload)}\n      return newstate\n    }else{\n      return state\n    }\n  }\n}\n\nconst store = createStore(stateChanger);\n// render()\n// store.subscribe(()=>render());\n\n\n// function add3(){\n//   if(store.getState()%2 ===1){\n//     store.dispatch({type:'add',payload:1})\n//   }\n// }\n\n// function add4(){\n//   setTimeout(()=>{\n//     store.dispatch({type:'add',payload:1})\n//   },2000)\n// }\n\n// function render(){\n//   ReactDOM.render(<App value={store.getState()}\n//   onAdd1 = {()=>{store.dispatch({type:'add',payload:1})}}\n//   onAdd2 = {()=>{store.dispatch({type:'add',payload:2})}}\n//   onAdd3 = {add3}\n//   onAdd4 = {add4}\n// />, document.getElementById('root'));\n// }\n\n\n  ReactDOM.render(<Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}